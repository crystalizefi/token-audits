{
  "id": 8,
  "analysisRequestId": 8,
  "tool": { "displayName": "Snap Scan" },
  "observations": [
    {
      "id": 20,
      "analysisId": 8,
      "title": "Function Default Visibility",
      "confidence": "HIGH",
      "severity": "unknown",
      "message": "Found error: _beforeTokenTransfer. undefined. Functions in Solidity are public by default. If a function is not marked with the visibility keyword explicitly, it can be accessed externally, which might not be the intended behavior.",
      "recommendation": "It's recommended to always specify the visibility of functions explicitly.",
      "swcId": "SWC-100",
      "vulnerabilityId": null,
      "sourcePath": "/0x1741378351101AdEE582F880468e2e02D8e9bd3B.sol",
      "startLine": 613,
      "startColumn": null,
      "endLine": 614,
      "endColumn": null
    },
    {
      "id": 21,
      "analysisId": 8,
      "title": "Floating Pragma",
      "confidence": "HIGH",
      "severity": "unknown",
      "message": "Found error: Floating pragma: ^0.8.0. Floating pragma detected: ^0.8.0. Floating pragmas can introduce a backwards compatibility risk that can lead to contracts behaving differently than intended.",
      "recommendation": "It is recommended to lock the version of the Solidity compiler to the specific version you are using.",
      "swcId": "SWC-103",
      "vulnerabilityId": null,
      "sourcePath": "/0x1741378351101AdEE582F880468e2e02D8e9bd3B.sol",
      "startLine": 0,
      "startColumn": null,
      "endLine": 1,
      "endColumn": null
    },
    {
      "id": 22,
      "analysisId": 8,
      "title": "Variable Shadowing",
      "confidence": "MEDIUM",
      "severity": "unknown",
      "message": "Found error: _totalSupply at constructor. Found 1 potential variable shadowing instances:. \n    Solidity allows for ambiguous naming of state variables when inheritance is used.\n    Contract A with a variable x could inherit contract B that also has a state variable x defined.\n    This would result in two separate versions of x, one of them being accessed from contract A and the other one from contract B.\n    In more complex contract systems this condition could go unnoticed and subsequently lead to security issues.\n    Shadowing state variables can also occur within a single contract when there are multiple definitions on the contract and function level.",
      "recommendation": "\n    Review storage variable layouts for your contract systems carefully and remove any ambiguities.\n    Always check for compiler warnings as they can flag the issue within a single contract.\n    Avoid using the same variable name in different scopes to prevent any potential confusions and misbehavior.",
      "swcId": "SWC-119",
      "vulnerabilityId": null,
      "sourcePath": "/0x1741378351101AdEE582F880468e2e02D8e9bd3B.sol",
      "startLine": 597,
      "startColumn": null,
      "endLine": 598,
      "endColumn": null
    },
    {
      "id": 23,
      "analysisId": 8,
      "title": "Message call with hardcoded gas amount",
      "confidence": "MEDIUM",
      "severity": "medium",
      "message": "Found error: transfer. Found 2 functions with hardcoded gas limits:. The transfer() and send() functions forward a fixed amount of 2300 gas. The gas cost of EVM instructions may change significantly during hard forks which may break already deployed contract systems that make fixed assumptions about gas costs.",
      "recommendation": "Avoid the use of transfer() and send() and do not otherwise specify a fixed amount of gas when performing calls. Use .call.value(...)('') instead. Use the checks-effects-interactions pattern and/or reentrancy locks to prevent reentrancy attacks.",
      "swcId": "SWC-134",
      "vulnerabilityId": null,
      "sourcePath": "/0x1741378351101AdEE582F880468e2e02D8e9bd3B.sol",
      "startLine": 137,
      "startColumn": null,
      "endLine": 138,
      "endColumn": null
    },
    {
      "id": 24,
      "analysisId": 8,
      "title": "Message call with hardcoded gas amount",
      "confidence": "MEDIUM",
      "severity": "medium",
      "message": "Found error: transferFrom. Found 2 functions with hardcoded gas limits:. The transfer() and send() functions forward a fixed amount of 2300 gas. The gas cost of EVM instructions may change significantly during hard forks which may break already deployed contract systems that make fixed assumptions about gas costs.",
      "recommendation": "Avoid the use of transfer() and send() and do not otherwise specify a fixed amount of gas when performing calls. Use .call.value(...)('') instead. Use the checks-effects-interactions pattern and/or reentrancy locks to prevent reentrancy attacks.",
      "swcId": "SWC-134",
      "vulnerabilityId": null,
      "sourcePath": "/0x1741378351101AdEE582F880468e2e02D8e9bd3B.sol",
      "startLine": 173,
      "startColumn": null,
      "endLine": 174,
      "endColumn": null
    }
  ]
}
