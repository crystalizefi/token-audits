{"id":40,"analysisRequestId":40,"tool":{"displayName":"Snap Scan"},"observations":[{"id":88,"analysisId":40,"title":"Unprotected Ether Withdrawal","confidence":"HIGH","severity":"high","message":"Found error: transfer. Found 1 unprotected Ether withdrawals:. Unprotected Ether withdrawal can lead to unauthorized transactions.","recommendation":"Use the checks-effects-interactions pattern and ensure that the caller is authorized.","swcId":"SWC-105","vulnerabilityId":null,"sourcePath":"/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.sol","startLine":332,"startColumn":null,"endLine":333,"endColumn":null},{"id":89,"analysisId":40,"title":"State Variable Default Visibility","confidence":"LOW","severity":"unknown","message":"Found error: messageSender. Found 1 state variables with default visibility:. Default visibility can lead to exposure of sensitive data or contract internals.","recommendation":"Explicitly declare the visibility of all state variables.","swcId":"SWC-108","vulnerabilityId":null,"sourcePath":"/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.sol","startLine":263,"startColumn":null,"endLine":264,"endColumn":null},{"id":90,"analysisId":40,"title":"Variable Shadowing","confidence":"MEDIUM","severity":"unknown","message":"Found error: owner in balanceOf. Found 2 potential variable shadowing instances:. \n    Solidity allows for ambiguous naming of state variables when inheritance is used.\n    Contract A with a variable x could inherit contract B that also has a state variable x defined.\n    This would result in two separate versions of x, one of them being accessed from contract A and the other one from contract B.\n    In more complex contract systems this condition could go unnoticed and subsequently lead to security issues.\n    Shadowing state variables can also occur within a single contract when there are multiple definitions on the contract and function level.","recommendation":"\n    Review storage variable layouts for your contract systems carefully and remove any ambiguities.\n    Always check for compiler warnings as they can flag the issue within a single contract.\n    Avoid using the same variable name in different scopes to prevent any potential confusions and misbehavior.","swcId":"SWC-119","vulnerabilityId":null,"sourcePath":"/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.sol","startLine":328,"startColumn":null,"endLine":329,"endColumn":null},{"id":91,"analysisId":40,"title":"Variable Shadowing","confidence":"MEDIUM","severity":"unknown","message":"Found error: owner in allowance. Found 2 potential variable shadowing instances:. \n    Solidity allows for ambiguous naming of state variables when inheritance is used.\n    Contract A with a variable x could inherit contract B that also has a state variable x defined.\n    This would result in two separate versions of x, one of them being accessed from contract A and the other one from contract B.\n    In more complex contract systems this condition could go unnoticed and subsequently lead to security issues.\n    Shadowing state variables can also occur within a single contract when there are multiple definitions on the contract and function level.","recommendation":"\n    Review storage variable layouts for your contract systems carefully and remove any ambiguities.\n    Always check for compiler warnings as they can flag the issue within a single contract.\n    Avoid using the same variable name in different scopes to prevent any potential confusions and misbehavior.","swcId":"SWC-119","vulnerabilityId":null,"sourcePath":"/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.sol","startLine":330,"startColumn":null,"endLine":331,"endColumn":null},{"id":92,"analysisId":40,"title":"Message call with hardcoded gas amount","confidence":"MEDIUM","severity":"medium","message":"Found error: transfer. Found 1 functions with hardcoded gas limits:. The transfer() and send() functions forward a fixed amount of 2300 gas. The gas cost of EVM instructions may change significantly during hard forks which may break already deployed contract systems that make fixed assumptions about gas costs.","recommendation":"Avoid the use of transfer() and send() and do not otherwise specify a fixed amount of gas when performing calls. Use .call.value(...)('') instead. Use the checks-effects-interactions pattern and/or reentrancy locks to prevent reentrancy attacks.","swcId":"SWC-134","vulnerabilityId":null,"sourcePath":"/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.sol","startLine":332,"startColumn":null,"endLine":333,"endColumn":null}]}